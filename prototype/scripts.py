
import os
import os.path

from nltk.stem import PorterStemmer

# apply PorterStemmer algorithm to sentences generated by Horton
def stem_sents():
    sents_dir = '../corpus/Sents'
    stemed_sents_dir = '../corpus/Sents_porter'
    if not os.path.exists(stemed_sents_dir):
        os.mkdir(stemed_sents_dir)
    stemmer = PorterStemmer()
    for d in os.listdir(sents_dir):
        if not os.path.exists(os.path.join(stemed_sents_dir, d)):
            os.mkdir(os.path.join(stemed_sents_dir, d))
        handled = set()
        print "begin [%s]..." % d
        for fn in os.listdir(os.path.join(sents_dir, d)):
            fnn = fn.split('.')[0]
            stemed_fnn = stemmer.stem(fnn)
            if stemed_fnn in handled:
                print 'duplicate stem for %s' % fnn
            handled.add(stemed_fnn)
            with open(os.path.join(sents_dir, d, fn), 'r') as to_read:
                with open(os.path.join(stemed_sents_dir, d, '.'.join([stemed_fnn, 'txt'])), 'a+') as to_append:
                    to_append.write(to_read.read())


def main():
    stem_sents()
    return None

if __name__ == '__main__':
    main()